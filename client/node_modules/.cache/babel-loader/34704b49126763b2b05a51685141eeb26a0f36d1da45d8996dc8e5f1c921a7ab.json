{"ast":null,"code":"/**\r\n * @instance A SearchQuery with key terms, ignored words, required words, and tags.\r\n */\nclass SearchQuery {\n  constructor() {\n    this.terms = [''];\n    this.ignore = [''];\n    this.require = [''];\n    this.tags = [''];\n  }\n}\nconst SEAPI = 'https://api.stackexchange.com/2.3/search/advanced';\nconst GoogleAPI = 'https://customsearch.googleapis.com/customsearch/v1';\n\n/**\r\n * A class containing methods to search a source.\r\n */\nexport class Searcher {\n  /**\r\n   * Given a search query containing terms and operators/operands,\r\n   * returns a SearchQuery object.\r\n   * @param {string} search The search query as a string.\r\n   * @returns {SearchQuery} The query as a SearchQuery object.\r\n   * @operators '--', '!-', 't-'\r\n   * @example\r\n   * Given: 'how to play piano --practice !-easy t-fast'\r\n   * -> terms = ['how', 'to', 'play', 'piano']\r\n   * -> ignore = ['practice']\r\n   * -> require = ['easy']\r\n   * -> tags = ['fast']\r\n   */\n  toSearchQuery(search) {\n    if (typeof search != 'string') {\n      throw new Error('Search is not a string.');\n    }\n    const sq = new SearchQuery();\n    sq.ignore = findOperands(search, '--'); // Find ignores\n    sq.require = findOperands(search, '!-'); // Find requires\n    sq.tags = findOperands(search, 't-'); // Find requires\n    // Find the rest\n    let terms = search;\n    sq.ignore.concat(sq.require).forEach(word => {\n      terms = terms.replace(word, '');\n    });\n    terms = ' ' + terms.replaceAll('--', '').replaceAll('!-', '').replaceAll('t-', '').replace(/\\s+/g, ' ').trim();\n    sq.terms = findOperands(terms, ' ');\n    return sq;\n  }\n\n  /**\r\n   * Takes a SearchQuery instance and returns a list of relevant articles from Stack Exchange.\r\n   * @async\r\n   * @param {string} site The site property in the SE API call.\r\n   * @param {SearchQuery} query The SearchQuery.\r\n   * @returns {Promise<{title, link, id}[]>} An array of {title, link, id} objects.\r\n   */\n  async searchStackExchange(site, query) {\n    if (!(query instanceof SearchQuery)) {\n      throw new Error('Query is not a SearchQuery.');\n    }\n    let reqURL = SEAPI;\n    reqURL += '?pagesize=30&order=desc&sort=relevance';\n    if (query.terms.length > 0) {\n      reqURL += `&q=${query.terms.join('%20')}`;\n    }\n    if (query.require.length > 0) {\n      reqURL += `&body=${query.require.join('%20')}`;\n    }\n    if (site) {\n      reqURL += `&site=${site}`;\n    }\n    console.log('Request: ' + reqURL);\n    let articles;\n    try {\n      const response = await fetch(reqURL);\n      const body = await response.json();\n      let items = body.items;\n      console.log();\n      articles = [];\n      items.forEach(item => {\n        articles.push({\n          title: item.title,\n          link: item.link,\n          id: item.question_id\n        });\n      });\n    } catch (Error) {\n      articles = [{\n        title: 'StackExchange search count limit reached',\n        link: '',\n        id: '-1'\n      }];\n    } finally {\n      return articles;\n    }\n  }\n\n  /**\r\n   * Takes a SearchQuery instance and returns a list of relevant search results from Google.\r\n   * @async\r\n   * @param {SearchQuery} query The SearchQuery.\r\n   * @returns {Promise<{title, link, id}[]>} An array of {title, link, id} objects.\r\n   */\n  async searchGoogle(query) {\n    if (!(query instanceof SearchQuery)) {\n      throw new Error('Query is not a SearchQuery.');\n    }\n    let reqURL = GoogleAPI;\n    reqURL += '?key=AIzaSyCMCksg_d6ca9srsVFNrBUzA1wbkLsfyRs&cx=33f51b3ea70b34663';\n    if (query.terms.length > 0) {\n      reqURL += `&q=${query.terms.join('%20')}`;\n    }\n    if (query.require.length > 0) {\n      reqURL += `&exactTerms=${query.require.join('%20')}`;\n    }\n    if (query.ignore.length > 0) {\n      reqURL += `&excludeTerms=${query.ignore.join('%20')}`;\n    }\n    console.log('Request: ' + reqURL);\n    let articles;\n    try {\n      const response = await fetch(reqURL);\n      const body = await response.json();\n      let items = body.items;\n      console.log();\n      articles = [];\n      items.forEach(item => {\n        articles.push({\n          title: item.title,\n          link: item.link,\n          id: item.cacheId\n        });\n      });\n    } catch (Error) {\n      articles = [{\n        title: 'Google search count limit reached',\n        link: '',\n        id: '-1'\n      }];\n    } finally {\n      return articles;\n    }\n  }\n}\n\n/**\r\n * Finds operands in a string denoted by (operator)(operand).\r\n * @param {string} string The full string to search.\r\n * @param {string} operator The operator to check for (e.g. --, !-, t-).\r\n * @returns {string[]} An array of found operands.\r\n *\r\n * @example\r\n * var prompt = 'how to --good learn chinese --happy --expensive';\r\n * findOperands(prompt, '-');\r\n * -> ['good', 'happy', 'expensive']\r\n */\nfunction findOperands(string, operator) {\n  const operands = [];\n  let index = string.indexOf(operator, 0);\n  while (index !== -1) {\n    let spaceIndex = string.indexOf(' ', index + 1);\n    if (spaceIndex === -1) {\n      spaceIndex = string.length;\n    }\n    operands.push(string.slice(index + 1, spaceIndex));\n    index = string.indexOf(operator, index + 1);\n  }\n  return operands;\n}","map":{"version":3,"names":["SearchQuery","terms","ignore","require","tags","SEAPI","GoogleAPI","Searcher","toSearchQuery","search","Error","sq","findOperands","concat","forEach","word","replace","replaceAll","trim","searchStackExchange","site","query","reqURL","length","join","console","log","articles","response","fetch","body","json","items","item","push","title","link","id","question_id","searchGoogle","cacheId","string","operator","operands","index","indexOf","spaceIndex","slice"],"sources":["C:/Users/winst/OneDrive/Documents/MyCodingProjects/search-helper/client/src/modules/searcher.js"],"sourcesContent":["/**\r\n * @instance A SearchQuery with key terms, ignored words, required words, and tags.\r\n */\r\nclass SearchQuery {\r\n  terms = [''];\r\n  ignore = [''];\r\n  require = [''];\r\n  tags = [''];\r\n}\r\n\r\nconst SEAPI = 'https://api.stackexchange.com/2.3/search/advanced';\r\nconst GoogleAPI = 'https://customsearch.googleapis.com/customsearch/v1';\r\n\r\n/**\r\n * A class containing methods to search a source.\r\n */\r\nexport class Searcher {\r\n  /**\r\n   * Given a search query containing terms and operators/operands,\r\n   * returns a SearchQuery object.\r\n   * @param {string} search The search query as a string.\r\n   * @returns {SearchQuery} The query as a SearchQuery object.\r\n   * @operators '--', '!-', 't-'\r\n   * @example\r\n   * Given: 'how to play piano --practice !-easy t-fast'\r\n   * -> terms = ['how', 'to', 'play', 'piano']\r\n   * -> ignore = ['practice']\r\n   * -> require = ['easy']\r\n   * -> tags = ['fast']\r\n   */\r\n  toSearchQuery(search) {\r\n    if (typeof search != 'string') {\r\n      throw new Error('Search is not a string.');\r\n    }\r\n    const sq = new SearchQuery();\r\n    sq.ignore = findOperands(search, '--'); // Find ignores\r\n    sq.require = findOperands(search, '!-'); // Find requires\r\n    sq.tags = findOperands(search, 't-'); // Find requires\r\n    // Find the rest\r\n    let terms = search;\r\n    sq.ignore.concat(sq.require).forEach((word) => {\r\n      terms = terms.replace(word, '');\r\n    });\r\n    terms =\r\n      ' ' +\r\n      terms\r\n        .replaceAll('--', '')\r\n        .replaceAll('!-', '')\r\n        .replaceAll('t-', '')\r\n        .replace(/\\s+/g, ' ')\r\n        .trim();\r\n    sq.terms = findOperands(terms, ' ');\r\n    return sq;\r\n  }\r\n\r\n  /**\r\n   * Takes a SearchQuery instance and returns a list of relevant articles from Stack Exchange.\r\n   * @async\r\n   * @param {string} site The site property in the SE API call.\r\n   * @param {SearchQuery} query The SearchQuery.\r\n   * @returns {Promise<{title, link, id}[]>} An array of {title, link, id} objects.\r\n   */\r\n  async searchStackExchange(site, query) {\r\n    if (!(query instanceof SearchQuery)) {\r\n      throw new Error('Query is not a SearchQuery.');\r\n    }\r\n    let reqURL = SEAPI;\r\n    reqURL += '?pagesize=30&order=desc&sort=relevance';\r\n    if (query.terms.length > 0) {\r\n      reqURL += `&q=${query.terms.join('%20')}`;\r\n    }\r\n    if (query.require.length > 0) {\r\n      reqURL += `&body=${query.require.join('%20')}`;\r\n    }\r\n    if (site) {\r\n      reqURL += `&site=${site}`;\r\n    }\r\n\r\n    console.log('Request: ' + reqURL);\r\n    let articles;\r\n    try {\r\n      const response = await fetch(reqURL);\r\n      const body = await response.json();\r\n      let items = body.items;\r\n      console.log();\r\n      articles = [];\r\n      items.forEach((item) => {\r\n        articles.push({\r\n          title: item.title,\r\n          link: item.link,\r\n          id: item.question_id,\r\n        });\r\n      });\r\n    } catch (Error) {\r\n      articles = [\r\n        {\r\n          title: 'StackExchange search count limit reached',\r\n          link: '',\r\n          id: '-1',\r\n        },\r\n      ];\r\n    } finally {\r\n      return articles;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Takes a SearchQuery instance and returns a list of relevant search results from Google.\r\n   * @async\r\n   * @param {SearchQuery} query The SearchQuery.\r\n   * @returns {Promise<{title, link, id}[]>} An array of {title, link, id} objects.\r\n   */\r\n  async searchGoogle(query) {\r\n    if (!(query instanceof SearchQuery)) {\r\n      throw new Error('Query is not a SearchQuery.');\r\n    }\r\n    let reqURL = GoogleAPI;\r\n    reqURL +=\r\n      '?key=AIzaSyCMCksg_d6ca9srsVFNrBUzA1wbkLsfyRs&cx=33f51b3ea70b34663';\r\n    if (query.terms.length > 0) {\r\n      reqURL += `&q=${query.terms.join('%20')}`;\r\n    }\r\n    if (query.require.length > 0) {\r\n      reqURL += `&exactTerms=${query.require.join('%20')}`;\r\n    }\r\n    if (query.ignore.length > 0) {\r\n      reqURL += `&excludeTerms=${query.ignore.join('%20')}`;\r\n    }\r\n\r\n    console.log('Request: ' + reqURL);\r\n    let articles;\r\n    try {\r\n      const response = await fetch(reqURL);\r\n      const body = await response.json();\r\n      let items = body.items;\r\n      console.log();\r\n      articles = [];\r\n      items.forEach((item) => {\r\n        articles.push({ title: item.title, link: item.link, id: item.cacheId });\r\n      });\r\n    } catch (Error) {\r\n      articles = [\r\n        { title: 'Google search count limit reached', link: '', id: '-1' },\r\n      ];\r\n    } finally {\r\n      return articles;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Finds operands in a string denoted by (operator)(operand).\r\n * @param {string} string The full string to search.\r\n * @param {string} operator The operator to check for (e.g. --, !-, t-).\r\n * @returns {string[]} An array of found operands.\r\n *\r\n * @example\r\n * var prompt = 'how to --good learn chinese --happy --expensive';\r\n * findOperands(prompt, '-');\r\n * -> ['good', 'happy', 'expensive']\r\n */\r\nfunction findOperands(string, operator) {\r\n  const operands = [];\r\n  let index = string.indexOf(operator, 0);\r\n  while (index !== -1) {\r\n    let spaceIndex = string.indexOf(' ', index + 1);\r\n    if (spaceIndex === -1) {\r\n      spaceIndex = string.length;\r\n    }\r\n    operands.push(string.slice(index + 1, spaceIndex));\r\n    index = string.indexOf(operator, index + 1);\r\n  }\r\n  return operands;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}